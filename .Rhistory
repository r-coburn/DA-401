hist(d$decay_time, freq = FALSE, main = "Histogram of Muon Decay Time", xlab = "Decay Time (microseconds)", breaks = 20)
curve(dexp(x, rate = decay_rate), from = 0, col = "red", add = TRUE)
arrows(y, value/sum(tab)+error_std, y, value/sum(tab)-error_std, length=0.05, angle=90, code=3)
return(c(decay_rate, 1/decay_rate))
}
fit_data("Threshold 0.544 volts.data")
fit_data <- function(data) {
d <- read_data(data)
decay_rate = 1/mean(d$decay_time)
y = seq(0.5, 19.5, by = 1)
tab <- table(cut(d$decay_time, breaks = seq(0, 20, by = 1)), d$decay_time)
value <- tapply(d$decay_time, cut(d$decay_time, breaks = seq(0, 20, by = 1)), function(x) sum(x!=0))
error_std <- sqrt(value)/sum(d$decay_time)
hist(d$decay_time, freq = FALSE, main = "Histogram of Muon Decay Time", xlab = "Decay Time (microseconds)", breaks = 20)
curve(dexp(x, rate = decay_rate), from = 0, col = "red", add = TRUE)
arrows(y, value/sum(tab)+error_std, y, value/sum(tab)-error_std, length=0.05, angle=90, code=3)
return(c(decay_rate, 1/decay_rate))
}
fit_data("Threshold 0.544 volts.data")
fit_data("23-03-01-15-19.data")
fit_data("23-03-01-16-24.data")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/Denison/Physics/Physics 312")
library(dplyr)
fit_data("Threshold 0.544 volts.data")
fit_data <- function(data) {
d <- read_data(data)
decay_rate = 1/mean(d$decay_time)
y = seq(0.5, 19.5, by = 1)
tab <- table(cut(d$decay_time, breaks = seq(0, 20, by = 1)), d$decay_time)
value <- tapply(d$decay_time, cut(d$decay_time, breaks = seq(0, 20, by = 1)), function(x) sum(x!=0))
error_std <- sqrt(value)/sum(d$decay_time)
hist(d$decay_time, freq = FALSE, main = "Histogram of Muon Decay Time", xlab = "Decay Time (microseconds)", breaks = 20)
curve(dexp(x, rate = decay_rate), from = 0, col = "red", add = TRUE)
arrows(y, value/sum(tab)+error_std, y, value/sum(tab)-error_std, length=0.05, angle=90, code=3)
return(c(decay_rate, 1/decay_rate))
}
read_data <- function(data) {
data <- read.table(data, header = FALSE, sep = " ", dec = ".")
muons <- as.data.frame(data$V1)
names(muons) <- "Decay_Time"
decay_time <- muons %>%
filter(Decay_Time < 40000) %>%
mutate(decay_time = Decay_Time/10^3) %>%
dplyr::select(decay_time)
}
fit_data("Threshold 0.544 volts.data")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/Denison/Physics/Physics 312/Lab 2")
library(dplyr)
read_data <- function(data) {
data <- read.table(data, header = FALSE, sep = " ", dec = ".")
muons <- as.data.frame(data$V1)
names(muons) <- "Decay_Time"
decay_time <- muons %>%
filter(Decay_Time < 40000) %>%
mutate(decay_time = Decay_Time/10^3) %>%
dplyr::select(decay_time)
}
fit_data <- function(data) {
d <- read_data(data)
decay_rate = 1/mean(d$decay_time)
y = seq(0.5, 19.5, by = 1)
tab <- table(cut(d$decay_time, breaks = seq(0, 20, by = 1)), d$decay_time)
value <- tapply(d$decay_time, cut(d$decay_time, breaks = seq(0, 20, by = 1)), function(x) sum(x!=0))
error_std <- sqrt(value)/sum(d$decay_time)
hist(d$decay_time, freq = FALSE, main = "Histogram of Muon Decay Time", xlab = "Decay Time (microseconds)", breaks = 20)
curve(dexp(x, rate = decay_rate), from = 0, col = "red", add = TRUE)
arrows(y, value/sum(tab)+error_std, y, value/sum(tab)-error_std, length=0.05, angle=90, code=3)
return(c(decay_rate, 1/decay_rate))
}
fit_data("23-03-01-16-24.data")
first_day <- read_data("23-03-01-16-24.data")
first_day <- read.table("23-03-01-16-24.data", header = F, sep = " ", dec = ".")
first_day
total_muons <- first_day %>%
filter(V1 >= 40000) %>%
mutate(muons = V1-40000) %>%
dplyr::select(V1)
sum(total_muons$V1)
5400*3*97
sum(total_muons$V1)
5400*3*97
sum(total_muons$V1)
5400*3*97
sum(total_muons$V1)
5400*3*97
sum(total_muons$V1)
6400*2*97
sum(total_muons$V1)
6400*2*97
sum(total_muons$V1)/(765.7*97*60)
3500000/(765.7*60*97)
sum(total_muons$V1)/(765.7*97*60*97)
sum(total_muons$V1)/(765.7*97*60)
3500000/(765.7*60*97)
3500000/(765.7*60*117)
3500000/(75.7*60*117)
d <- read_data("Threshold 0.544 volts.data")
decay_rate = 1/mean(d$decay_time)
mean(d$decay_time)
mean(d$decay_time)*5
greater <- d %>%
filter(decay_time >= mean(decay_time)*5)
plot(greater)
hist(greater, freq = T)
hist(greater$decay_time, freq = T)
mean_uni_1 <- max(d$decay_time)-mean(d$decay_time)*5
mean_uni_1
tab <- table(cut(d$decay_time, breaks = seq(0, 20, by = 1)), d$decay_time)
tab
value <- tapply(d$decay_time, cut(d$decay_time, breaks = seq(0, 20, by = 1)), function(x) sum(x!=0))
value
as.data.frame(value)
counts <- as.data.frame(value)
counts
View(counts)
first_round <- counts %>%
mutate(minus.1 = value - mean_uni_1)
View(first_round)
mean(first_round$minus.1)*5
mean(first_round$minus.1)
first_round <- counts %>%
mutate(minus.1 = value - mean_uni_1)
mean(first_round$minus.1)
dexp(x, rate = 1/mean(first_round$minus.1))
x = seq(0, 20, by = 1)
dexp(x, rate = 1/mean(first_round$minus.1))
plot(x, dexp(x, rate = 1/mean(first_round$minus.1)))
plot(x, dexp(x, rate = mean(first_round$minus.1)))
hist(greater$decay_time, freq = T)
mean_uni_1 <- max(d$decay_time)-mean(d$decay_time)*5
mean_uni_1 <- max(d$decay_time)-mean(d$decay_time)*5
mean_uni_1 <- max(d$decay_time)-mean(d$decay_time)*5
mean_uni_1
?pexp
hist(greater$decay_time, freq = T)
mean_uni_1 <- (max(d$decay_time)+mean(d$decay_time)*5)/2
mean_uni_1
hist(greater$decay_time, freq = T)
tab <- table(cut(d$decay_time, breaks = seq(0, 20, by = 1)), d$decay_time)
tab
value <- tapply(d$decay_time, cut(d$decay_time, breaks = seq(0, 20, by = 1)), function(x) sum(x!=0))
value
grater
greater
greater <- d %>%
filter(decay_time >= mean(decay_time)*5)
greater
values_1 <- tapply(d$decay_time, cut(greater$decay_time, breaks = seq(0, 20, by = 1)), function(x) sum(x!=0))
values_1 <- tapply(greater$decay_time, cut(greater$decay_time, breaks = seq(0, 20, by = 1)), function(x) sum(x!=0))
values_1
sum(values_1)
sum(values_1, na.rm = T)
mean(values_1, na.rm = T)
values_1
65/9
mean(value)
values_1-subtract_1
subtract_1 <- mean(values_1, na.rm = T)
values_1-subtract_1
value-subtract_1
value <- tapply(d$decay_time, cut(d$decay_time, breaks = seq(0, 20, by = 1)), function(x) sum(x!=0))
value-subtract_1
first_normal <- value-subtract_1
first_normal
weighted.mean(seq(0.5, 19.5, 20), first_normal)
length(first_normal)
length(seq(0.5, 19.5, 20))
seq(0.5, 19.5, 20)
weighted.mean(seq(0.5, 19.5, 1), first_normal)
knitr::opts_chunk$set(echo = TRUE)
#always run
library(spotifyr)
library(lubridate)
library(tidyverse)
library(knitr)
Sys.setenv(SPOTIFY_CLIENT_ID = '4368c76bfce14f35b6ea1b3ea6b3723b')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '533222a8cd3b4d8398d83e9c87ec084f')
access_token <- get_spotify_access_token()
data <- read.csv("Big_data")
data <- data[,c(1:2,6,3:5)]
for(i in 1:nrow(data)) { #for release dates with only the year, it sets it to be the first day of the year
if(nchar(data$release_date[i]) == 4) {
data$release_date[i] <- paste(data$release_date[i], "-01-01", sep = "")
}
if(nchar(data$release_date[i]) == 7) {
data$release_date[i] <- paste(data$release_date[i], "-01", sep = "")
}
}
data$year <- as.numeric(substr(data$release_date, 1, 4))
add_artist_to_albums <- function(artist_id) {
albums <- get_artist_albums(artist_id) #getting all albums from the artist
albums$artist_name <- get_artist(artist_id)$name #adding the artist name to the albums
albums <- albums %>%
select(artist_name, name, release_date, id) %>%
dplyr::rename(album_name = name, album_id = id)
return(albums)
}
album_and_songs <- function(artist_id) {
album_and_song <- cbind(add_artist_to_albums(artist_id)[1,], get_album(toString(add_artist_to_albums(artist_id)$album_id[1]))[[19]][[2]][,c("id", "name")], row.names=NULL)
for(i in 2:nrow(add_artist_to_albums(artist_id))) {
album_and_song <- rbind(album_and_song, cbind(add_artist_to_albums(artist_id)[i,], get_album(toString(add_artist_to_albums(artist_id)$album_id[i]))[[19]][[2]][,c("id", "name")], row.names=NULL))
}
album_and_song <- album_and_song %>%
dplyr::rename(song_name = name, song_id = id)
return(album_and_song)
}
fully_compiled <- function(artist_id) {
albums <- album_and_songs(artist_id)
sections <- get_track_audio_analysis(albums$song_id[1])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[1])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- cbind(album_and_songs(artist_id)[1,], audio_analysis)
for(i in 2:nrow(album_and_songs(artist_id))) {
sections <- get_track_audio_analysis(albums$song_id[i])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[i])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- rbind(complete, cbind(albums[i,], audio_analysis))
}
return(complete)
}
album_and_songs("4Z8W4fKeB5YxbusRsdQVPb")$song_id[1]
data <- read.csv("Big_data")
data <- data[,c(1:2,6,3:5)]
str(data)
#always run
library(spotifyr)
library(lubridate)
library(tidyverse)
library(knitr)
Sys.setenv(SPOTIFY_CLIENT_ID = '4368c76bfce14f35b6ea1b3ea6b3723b')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '533222a8cd3b4d8398d83e9c87ec084f')
access_token <- get_spotify_access_token()
data <- read.csv("Big_data")
data <- data[,c(1:2,6,3:5)]
for(i in 1:nrow(data)) { #for release dates with only the year, it sets it to be the first day of the year
if(nchar(data$release_date[i]) == 4) {
data$release_date[i] <- paste(data$release_date[i], "-01-01", sep = "")
}
if(nchar(data$release_date[i]) == 7) {
data$release_date[i] <- paste(data$release_date[i], "-01", sep = "")
}
}
data$year <- as.numeric(substr(data$release_date, 1, 4))
data_and_audio_sample <- function(sample_size) {
rows <- sample(nrow(data), 10)
tempo <- c()
loudness <- c()
for (i in 1:sample_size) {
duration_percent <- (get_track_audio_analysis(data[rows[i],]$song_id)$sections$tempo/sum(get_track_audio_analysis(data[rows[i],]$song_id)$sections$tempo))
tempo[i] <- weighted.mean(get_track_audio_analysis(data[rows[i],]$song_id)$sections$tempo, duration_percent)
loudness[i] <- weighted.mean(get_track_audio_analysis(data[rows[i],]$song_id)$sections$loudness, duration_percent)
}
sampled_data <- data.frame(data[sample(nrow(data), 10), ], tempo, loudness)
row.names(sampled_data) <- NULL
return(sampled_data)
}
d <- data_and_audio_sample(10)
plot(d$year, d$tempo)
plot(d$year, d$tempo)
d <- data_and_audio_sample(50)
d <- data_and_audio_sample(40)
d <- data_and_audio_sample(30)
d <- data_and_audio_sample(20)
d <- data_and_audio_sample(10)
d
d <- data_and_audio_sample(12)
data_and_audio_sample <- function(sample_size) {
rows <- sample(nrow(data), 10)
tempo <- c()
loudness <- c()
for (i in 1:sample_size) {
sections <- get_track_audio_analysis(data[rows[i],]$song_id)$sections
duration_percent <- (sections$tempo/sum(sections$tempo))
tempo[i] <- weighted.mean(sections$tempo, duration_percent)
loudness[i] <- weighted.mean(sections$loudness, duration_percent)
}
sampled_data <- data.frame(data[sample(nrow(data), 10), ], tempo, loudness)
row.names(sampled_data) <- NULL
return(sampled_data)
}
d <- data_and_audio_sample(12)
d <- data_and_audio_sample(11)
d <- data_and_audio_sample(10)
d <- data_and_audio_sample(10)
d
set.seed(0)
combined <- rbind(data_and_audio_sample(10), data_and_audio_sample(10))
for(i in 3:10) {
combined <- rbind(combined, data_and_audio_sample(10))
}
combined
length(unique(combined$song_id))
plot(combined$year, combined$tempo)
plot(combined$year, combined$loudness)
get_track_
get_track_audio_analysis("6ZFbXIJkuI1dVNWvzJzown")
get_track_audio_analysis("6ZFbXIJkuI1dVNWvzJzown")$segments
get_track_audio_analysis("6ZFbXIJkuI1dVNWvzJzown")$segments$timbre
get_track_audio_analysis("6ZFbXIJkuI1dVNWvzJzown")$segments
get_track_audio_analysis("6ZFbXIJkuI1dVNWvzJzown")$segments$timbre
knitr::opts_chunk$set(echo = TRUE)
#always run
library(spotifyr)
library(lubridate)
library(tidyverse)
library(knitr)
Sys.setenv(SPOTIFY_CLIENT_ID = '4368c76bfce14f35b6ea1b3ea6b3723b')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '533222a8cd3b4d8398d83e9c87ec084f')
access_token <- get_spotify_access_token()
setwd("~/Desktop/Denison/DA/DA 401/Project")
add_artist_to_albums <- function(artist_id) {
albums <- get_artist_albums(artist_id) #getting all albums from the artist
albums$artist_name <- get_artist(artist_id)$name #adding the artist name to the albums
albums <- albums %>%
select(artist_name, name, release_date, id) %>%
dplyr::rename(album_name = name, album_id = id)
for(i in 1:nrow(albums)) { #for release dates with only the year, it sets it to be the first day of the year
if(nchar(albums$release_date[i]) == 4) {
albums$release_date[i] <- paste(albums$release_date[i], "-01-01", sep = "")
}
if(nchar(albums$release_date[i]) == 7) {
albums$release_date[i] <- paste(albums$release_date[i], "-01", sep = "")
}
}
albums$year <- as.numeric(substr(albums$release_date, 1, 4))
return(albums)
}
album_and_songs <- function(artist_id) {
album_and_song <- cbind(add_artist_to_albums(artist_id)[1,], get_album(toString(add_artist_to_albums(artist_id)$album_id[1]))[[19]][[2]][,c("id", "name")], row.names=NULL)
for(i in 2:nrow(add_artist_to_albums(artist_id))) {
album_and_song <- rbind(album_and_song, cbind(add_artist_to_albums(artist_id)[i,], get_album(toString(add_artist_to_albums(artist_id)$album_id[i]))[[19]][[2]][,c("id", "name")], row.names=NULL))
}
album_and_song <- album_and_song %>%
dplyr::rename(song_name = name, song_id = id)
return(album_and_song)
}
fully_compiled <- function(artist_id) {
albums <- album_and_songs(artist_id)
sections <- get_track_audio_analysis(albums$song_id[1])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[1])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- cbind(albums[1,], audio_analysis, row.names=NULL) #changed to albums from album_and_songs(artist_id)
for(i in 2:nrow(albums)) {
sections <- get_track_audio_analysis(albums$song_id[i])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[i])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- rbind(complete, cbind(albums[i,], audio_analysis, row.names=NULL))
}
return(complete)
}
get_genre_artists_list <- function(genre) {
artists <- spotifyr::get_genre_artists(genre = genre, limit = 50) %>%
select(name, id, genres) %>%
rename(artist_id = id)
artists$main_genre <- genre
return(artists)
}
album_and_songs_genre <- function(genre) {
artists <- get_genre_artists_list(genre)
fully_complete <- album_and_songs(artists[1,]$artist_id)
for(i in 2:nrow(artists)) {
fully_complete <- rbind(fully_complete, album_and_songs(artists[i,]$artist_id))
}
#fully_complete <- cbind(fully_complete, rep("classical", nrow(a)))
#colnames(fully_complete)[length(colnames(fully_complete))] <- "genre"
return(fully_complete)
}
data_and_audio_sample <- function(data, sample_size) {
rows <- sample(nrow(data), sample_size)
tempo <- c()
loudness <- c()
for (i in 1:sample_size) {
sections <- get_track_audio_analysis(data[rows[i],]$song_id)$sections
segments <- get_track_audio_analysis(data[rows[i],]$song_id)$segments
duration_percent <- (sections$tempo/sum(sections$tempo))
tempo[i] <- weighted.mean(sections$tempo, duration_percent)
loudness[i] <- weighted.mean(sections$loudness, duration_percent)
}
sampled_data <- data.frame(data[sample(nrow(data), sample_size), ], tempo, loudness)
row.names(sampled_data) <- NULL
return(sampled_data)
}
red <- "red"
paste("/desktop", red, ".csv")
paste("/desktop", red, ".csv", sep = "")
paste("~/Desktop/Denison/DA/DA 401/Project/", red, ".csv", sep = "")
genres <- c("post-punk", "polish", "rap", "boy", "nerdcore", "dream", "crack", "columbus", "stl", "garage", "metal", "roots", "schlager", "italian", "military")
for(genre in genres) {
genre_music <- album_and_songs_genre(genre)
write.csv(genre_music, paste("~/Desktop/Denison/DA/DA 401/Project/", genre, ".csv", sep = ""), row.names = F)
}
write.csv(album_and_songs_genre(genres[1]), paste("~/Desktop/Denison/DA/DA 401/Project/", genres[1], ".csv", sep = ""), row.names = F)
write.csv(album_and_songs_genre(genres[1]), paste("~/Desktop/Denison/DA/DA 401/Project/", genres[1], ".csv", sep = ""), row.names = F)
knitr::opts_chunk$set(echo = TRUE)
#always run
library(spotifyr)
library(lubridate)
library(tidyverse)
library(knitr)
Sys.setenv(SPOTIFY_CLIENT_ID = '4368c76bfce14f35b6ea1b3ea6b3723b')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '533222a8cd3b4d8398d83e9c87ec084f')
access_token <- get_spotify_access_token()
setwd("~/Desktop/Denison/DA/DA 401/Project")
#always run
library(spotifyr)
library(lubridate)
library(tidyverse)
library(knitr)
Sys.setenv(SPOTIFY_CLIENT_ID = '4368c76bfce14f35b6ea1b3ea6b3723b')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '533222a8cd3b4d8398d83e9c87ec084f')
access_token <- get_spotify_access_token()
setwd("~/Desktop/Denison/DA/DA 401/Project")
add_artist_to_albums <- function(artist_id) {
albums <- get_artist_albums(artist_id) #getting all albums from the artist
albums$artist_name <- get_artist(artist_id)$name #adding the artist name to the albums
albums <- albums %>%
select(artist_name, name, release_date, id) %>%
dplyr::rename(album_name = name, album_id = id)
for(i in 1:nrow(albums)) { #for release dates with only the year, it sets it to be the first day of the year
if(nchar(albums$release_date[i]) == 4) {
albums$release_date[i] <- paste(albums$release_date[i], "-01-01", sep = "")
}
if(nchar(albums$release_date[i]) == 7) {
albums$release_date[i] <- paste(albums$release_date[i], "-01", sep = "")
}
}
albums$year <- as.numeric(substr(albums$release_date, 1, 4))
return(albums)
}
album_and_songs <- function(artist_id) {
album_and_song <- cbind(add_artist_to_albums(artist_id)[1,], get_album(toString(add_artist_to_albums(artist_id)$album_id[1]))[[19]][[2]][,c("id", "name")], row.names=NULL)
for(i in 2:nrow(add_artist_to_albums(artist_id))) {
album_and_song <- rbind(album_and_song, cbind(add_artist_to_albums(artist_id)[i,], get_album(toString(add_artist_to_albums(artist_id)$album_id[i]))[[19]][[2]][,c("id", "name")], row.names=NULL))
}
album_and_song <- album_and_song %>%
dplyr::rename(song_name = name, song_id = id)
return(album_and_song)
}
fully_compiled <- function(artist_id) {
albums <- album_and_songs(artist_id)
sections <- get_track_audio_analysis(albums$song_id[1])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[1])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- cbind(albums[1,], audio_analysis, row.names=NULL) #changed to albums from album_and_songs(artist_id)
for(i in 2:nrow(albums)) {
sections <- get_track_audio_analysis(albums$song_id[i])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[i])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- rbind(complete, cbind(albums[i,], audio_analysis, row.names=NULL))
}
return(complete)
}
get_genre_artists_list <- function(genre) {
artists <- spotifyr::get_genre_artists(genre = genre, limit = 50) %>%
select(name, id, genres) %>%
rename(artist_id = id)
artists$main_genre <- genre
return(artists)
}
album_and_songs_genre <- function(genre) {
artists <- get_genre_artists_list(genre)
fully_complete <- album_and_songs(artists[1,]$artist_id)
for(i in 2:nrow(artists)) {
fully_complete <- rbind(fully_complete, album_and_songs(artists[i,]$artist_id))
}
#fully_complete <- cbind(fully_complete, rep("classical", nrow(a)))
#colnames(fully_complete)[length(colnames(fully_complete))] <- "genre"
return(fully_complete)
}
data_and_audio_sample <- function(data, sample_size) {
rows <- sample(nrow(data), sample_size)
tempo <- c()
loudness <- c()
for (i in 1:sample_size) {
sections <- get_track_audio_analysis(data[rows[i],]$song_id)$sections
segments <- get_track_audio_analysis(data[rows[i],]$song_id)$segments
duration_percent <- (sections$tempo/sum(sections$tempo))
tempo[i] <- weighted.mean(sections$tempo, duration_percent)
loudness[i] <- weighted.mean(sections$loudness, duration_percent)
}
sampled_data <- data.frame(data[sample(nrow(data), sample_size), ], tempo, loudness)
row.names(sampled_data) <- NULL
return(sampled_data)
}
post_punk <- album_and_songs_genre(genres[1])
genres <- c("post-punk", "polish", "rap", "boy", "nerdcore", "dream", "crack", "columbus", "stl", "garage", "metal", "roots", "schlager", "italian", "military")
post_punk <- album_and_songs_genre(genres[1])
post_punk <- read.csv("post-punk.csv")
polish <- read.csv("polish.csv")
polish
post_punk
post_punk_sample <- data_and_audio_sample(post_punk, 100)
