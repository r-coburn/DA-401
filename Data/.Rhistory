car::vif(glm(rock~., data = data.frame(prin.coms, rock), family = "binomial")
)
# first KNN
accuracy <- c()
for(i in 1:100){
predicted <- knn(train = train.features, test = test.features, cl = train.rock, k = i)
ConMat <- table(test.rock, predicted)
TN <- ConMat[1,1]
FP <- ConMat[1,2]
FN <- ConMat[2,1]
TP <- ConMat[2,2]
accuracy[i] <- (TP + TN)/sum(ConMat)
}
plot(accuracy)
which.max(accuracy) # optimal K = 6
max(accuracy) #classification accuracy of 60.0%
# second KNN (with PCA)
train.features.norm <- scale(train.features)
train.corr.mat <- cor(train.features.norm)
train.features.pca <- princomp(train.corr.mat)
summary(train.features.pca) # top 20 principal components make up over 99% of variance and first two almost 50%
train.prin.coms <- data.frame(as.matrix(train.features) %*% as.matrix(train.features.pca$loadings))
test.features.norm <- scale(test.features)
test.corr.mat <- cor(test.features.norm)
test.features.pca <- princomp(test.corr.mat)
summary(test.features.pca)
test.prin.coms <- data.frame(as.matrix(test.features) %*% as.matrix(test.features.pca$loadings))
# all principal components
accuracy <- c()
for(i in 1:100){
predicted <- knn(train = train.prin.coms, test = test.prin.coms, cl = train.rock, k = i)
ConMat <- table(test.rock, predicted)
TN <- ConMat[1,1]
FP <- ConMat[1,2]
FN <- ConMat[2,1]
TP <- ConMat[2,2]
accuracy[i] <- (TP + TN)/sum(ConMat)
}
plot(accuracy)
which.max(accuracy) # optimal K = 70
max(accuracy) # classification accuracy of 58.33%
# testing for acoustic coherence
rm(accuracy)
early <- data[data$year<=median(data$year),] # 407 observations
late <- data[data$year>median(data$year),] # 393 observations
early.features <- early[,c(5,8:33)]
early.rock <- early$rock
late.features <- late[,c(5,8:33)]
late.rock <- late$rock
# logistic regression with all variables (early)
cv.mod.early <- cv.glmnet(x = as.matrix(early.features), y = early.rock, family = "binomial", type.measure = "class")
lambda <- cv.mod.early$lambda.min
mod.early <- glmnet(early.features, early.rock, family = "binomial", lambda = lambda)
mod.early.probs <- predict(mod.early, newx = as.matrix(early.features), type = "response")
early$mod.early.probs <- mod.early.probs[,1]
early.rock.class <- ifelse(early.rock == 1, "rock", "not rock")
logistic.probs <- early$mod.early.probs
mod.early.cp <- cutpointr(data.frame(early.rock.class, logistic.probs), x=logistic.probs, class = early.rock.class, method = maximize_metric, metric = accuracy)
summary(mod.early.cp) # accuracy = 68.55%
# logistic regression with all variables (late)
cv.mod.late <- cv.glmnet(x = as.matrix(late.features), y = late.rock, family = "binomial", type.measure = "class")
lambda <- cv.mod.late$lambda.min
mod.late <- glmnet(late.features, late.rock, family = "binomial", lambda = lambda)
mod.late.probs <- predict(mod.late, newx = as.matrix(late.features), type = "response")
late$mod.late.probs <- mod.late.probs[,1]
late.rock.class <- ifelse(late.rock == 1, "rock", "not rock")
logistic.probs <- late$mod.late.probs
mod.late.cp <- cutpointr(data.frame(late.rock.class, logistic.probs), x=logistic.probs, class = late.rock.class, method = maximize_metric, metric = accuracy)
summary(mod.late.cp) # accuracy = 70.48%
# logistic regression with principal components (early)
early.features.norm <- scale(early.features)
early.corr.mat <- cor(early.features.norm)
early.features.pca <- princomp(early.corr.mat)
summary(early.features.pca)
early.prin.coms <- data.frame(as.matrix(early.features) %*% as.matrix(early.features.pca$loadings))
early.cv.mod.pca <- cv.glmnet(x = as.matrix(early.prin.coms), y = early.rock, family = "binomial", type.measure = "class")
early.lambda.pca <- early.cv.mod.pca$lambda.min
early.mod.pca <- glmnet(early.prin.coms, early.rock, family = "binomial", lambda = early.lambda.pca)
early.mod.probs.pca <- predict(early.mod.pca, newx = as.matrix(early.prin.coms), type = "response")
early$early.mod.probs.pca <- early.mod.probs.pca[,1]
early.rock.class <- ifelse(early.rock == 1, "rock", "not rock")
early.logistic.probs.pca <- early$early.mod.probs.pca
early.mod.cp.pca <- cutpointr(data.frame(early.rock.class, early.logistic.probs.pca), x=early.logistic.probs.pca, class = early.rock.class, method = maximize_metric, metric = accuracy)
summary(early.mod.cp.pca) # accuracy = 67.57%
# logistic regression with principal components (late)
late.features.norm <- scale(late.features)
late.corr.mat <- cor(late.features.norm)
late.features.pca <- princomp(late.corr.mat)
summary(late.features.pca)
late.prin.coms <- data.frame(as.matrix(late.features) %*% as.matrix(late.features.pca$loadings))
late.cv.mod.pca <- cv.glmnet(x = as.matrix(late.prin.coms), y = late.rock, family = "binomial", type.measure = "class")
late.lambda.pca <- late.cv.mod.pca$lambda.min
late.mod.pca <- glmnet(late.prin.coms, late.rock, family = "binomial", lambda = late.lambda.pca)
late.mod.probs.pca <- predict(late.mod.pca, newx = as.matrix(late.prin.coms), type = "response")
late$late.mod.probs.pca <- late.mod.probs.pca[,1]
late.rock.class <- ifelse(late.rock == 1, "rock", "not rock")
late.logistic.probs.pca <- late$late.mod.probs.pca
late.mod.cp.pca <- cutpointr(data.frame(late.rock.class, late.logistic.probs.pca), x=late.logistic.probs.pca, class = late.rock.class, method = maximize_metric, metric = accuracy)
summary(late.mod.cp.pca) #67.68
# test for acoustic coherence (feature set)
accoustic.coherence.probs <- predict(early.mod.pca, newx = as.matrix(late.features), type = "response")
accoustic.coherence.cp <- cutpointr(data.frame(late.rock.class, accoustic.coherence.probs), x=accoustic.coherence.probs, class = late.rock.class, method = maximize_metric, metric = accuracy)
summary(accoustic.coherence.cp) # accuracy = 55.98%
# test for acoustic coherence (PCA)
accoustic.coherence.probs.pca <- predict(early.mod.pca, newx = as.matrix(late.prin.coms), type = "response")
accoustic.coherence.cp.pca <- cutpointr(data.frame(late.rock.class, accoustic.coherence.probs.pca), x=accoustic.coherence.probs.pca, class = late.rock.class, method = maximize_metric, metric = accuracy)
summary(accoustic.coherence.cp.pca) # accuracy = 53.69%
?lubridate
knitr::opts_chunk$set(echo = TRUE)
library(spotifyr)
library(knitr)
Sys.setenv(SPOTIFY_CLIENT_ID = '4368c76bfce14f35b6ea1b3ea6b3723b')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '533222a8cd3b4d8398d83e9c87ec084f')
access_token <- get_spotify_access_token()
setwd("~/Desktop/Denison/DA/DA 401/Project")
add_artist_to_albums <- function(artist_id) {
albums <- get_artist_albums(artist_id) #getting all albums from the artist
albums$artist_name <- get_artist(artist_id)$name #adding the artist name to the albums
albums <- albums %>%
select(artist_name, name, release_date, id) %>%
dplyr::rename(album_name = name, album_id = id)
for(i in 1:nrow(albums)) { #for release dates with only the year, it sets it to be the first day of the year
if(nchar(albums$release_date[i]) == 4) {
albums$release_date[i] <- paste(albums$release_date[i], "-01-01", sep = "")
}
if(nchar(albums$release_date[i]) == 7) {
albums$release_date[i] <- paste(albums$release_date[i], "-01", sep = "")
}
}
albums$year <- as.numeric(substr(albums$release_date, 1, 4))
return(albums)
}
album_and_songs <- function(artist_id) {
album_and_song <- cbind(add_artist_to_albums(artist_id)[1,], get_album(toString(add_artist_to_albums(artist_id)$album_id[1]))[[18]][[2]][,c("id", "name")], row.names=NULL)
for(i in 2:nrow(add_artist_to_albums(artist_id))) {
album_and_song <- rbind(album_and_song, cbind(add_artist_to_albums(artist_id)[i,], get_album(toString(add_artist_to_albums(artist_id)$album_id[i]))[[18]][[2]][,c("id", "name")], row.names=NULL))
}
album_and_song <- album_and_song %>%
dplyr::rename(song_name = name, song_id = id)
return(album_and_song)
}
fully_compiled <- function(artist_id) {
albums <- album_and_songs(artist_id)
sections <- get_track_audio_analysis(albums$song_id[1])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[1])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- cbind(albums[1,], audio_analysis, row.names=NULL) #changed to albums from album_and_songs(artist_id)
for(i in 2:nrow(albums)) {
sections <- get_track_audio_analysis(albums$song_id[i])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[i])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- rbind(complete, cbind(albums[i,], audio_analysis, row.names=NULL))
}
return(complete)
}
get_genre_artists_list <- function(genre) {
artists <- spotifyr::get_genre_artists(genre = genre, limit = 50) %>%
select(name, id, genres) %>%
rename(artist_id = id)
artists$main_genre <- genre
return(artists)
}
album_and_songs_genre <- function(genre) {
artists <- get_genre_artists_list(genre)
fully_complete <- album_and_songs(artists[1,]$artist_id)
for(i in 2:nrow(artists)) {
fully_complete <- rbind(fully_complete, album_and_songs(artists[i,]$artist_id))
}
return(fully_complete)
}
data_and_audio_sample <- function(data, sample_size) {
rows <- sample(nrow(data), sample_size)
tempo <- c(); loudness <- c(); p1 <- c(); p2 <- c(); p3 <- c(); p4 <- c(); p5 <- c(); p6 <- c(); p7 <- c(); p8 <- c(); p9 <- c(); p10 <- c(); p11 <- c(); p12 <- c(); t1 <- c(); t2 <- c(); t3 <- c(); t4 <- c(); t5 <- c(); t6 <- c(); t7 <- c(); t8 <- c(); t9 <- c(); t10 <- c(); t11 <- c(); t12 <- c()
for (i in 1:sample_size) {
sections <- get_track_audio_analysis(data[rows[i],]$song_id)$sections
segments <- get_track_audio_analysis(data[rows[i],]$song_id)$segments
pitches <- segments$pitches
timbre <- segments$timbre
pitch1 <- c(); pitch2 <- c(); pitch3 <- c(); pitch4 <- c(); pitch5 <- c(); pitch6 <- c(); pitch7 <- c(); pitch8 <- c(); pitch9 <- c(); pitch10 <- c(); pitch11 <- c(); pitch12 <- c(); timbre1 <- c(); timbre2 <- c(); timbre3 <- c(); timbre4 <- c(); timbre5 <- c(); timbre6 <- c(); timbre7 <- c(); timbre8 <- c(); timbre9 <- c(); timbre10 <- c(); timbre11 <- c(); timbre12 <- c();
for(j in 1:nrow(segments)){
pitch1[j] <- pitches[[j]][1]; pitch2[j] <- pitches[[j]][2]; pitch3[j] <- pitches[[j]][3]; pitch4[j] <- pitches[[j]][4]; pitch5[j] <- pitches[[j]][5]; pitch6[j] <- pitches[[j]][6]; pitch7[j] <- pitches[[j]][7]; pitch8[j] <- pitches[[j]][8]; pitch9[j] <- pitches[[j]][9]; pitch10[j] <- pitches[[j]][10]; pitch11[j] <- pitches[[j]][11]; pitch12[j] <- pitches[[j]][12]; timbre1[j] <- timbre[[j]][1]; timbre2[j] <- timbre[[j]][2]; timbre3[j] <- timbre[[j]][3]; timbre4[j] <- timbre[[j]][4]; timbre5[j] <- timbre[[j]][5]; timbre6[j] <- timbre[[j]][6]; timbre7[j] <- timbre[[j]][7]; timbre8[j] <- timbre[[j]][8]; timbre9[j] <- timbre[[j]][9]; timbre10[j] <- timbre[[j]][10]; timbre11[j] <- timbre[[j]][11]; timbre12[j] <- timbre[[j]][12]
}
p1[i] <- weighted.mean(pitch1, segments$duration); p2[i] <- weighted.mean(pitch2, segments$duration); p3[i] <- weighted.mean(pitch3, segments$duration); p4[i] <- weighted.mean(pitch4, segments$duration); p5[i] <- weighted.mean(pitch5, segments$duration); p6[i] <- weighted.mean(pitch6, segments$duration); p7[i] <- weighted.mean(pitch7, segments$duration); p8[i] <- weighted.mean(pitch8, segments$duration); p9[i] <- weighted.mean(pitch9, segments$duration); p10[i] <- weighted.mean(pitch10, segments$duration); p11[i] <- weighted.mean(pitch11, segments$duration); p12[i] <- weighted.mean(pitch12, segments$duration); t1[i] <- weighted.mean(timbre1, segments$duration); t2[i] <- weighted.mean(timbre2, segments$duration); t3[i] <- weighted.mean(timbre3, segments$duration); t4[i] <- weighted.mean(timbre4, segments$duration); t5[i] <- weighted.mean(timbre5, segments$duration); t6[i] <- weighted.mean(timbre6, segments$duration); t7[i] <- weighted.mean(timbre7, segments$duration); t8[i] <- weighted.mean(timbre8, segments$duration); t9[i] <- weighted.mean(timbre9, segments$duration); t10[i] <- weighted.mean(timbre10, segments$duration); t11[i] <- weighted.mean(timbre11, segments$duration); t12[i] <- weighted.mean(timbre12, segments$duration)
tempo[i] <- weighted.mean(sections$tempo, sections$duration)
loudness[i] <- weighted.mean(sections$loudness, sections$duration)
}
genre <- rep(deparse(substitute(data)), sample_size)
sampled_data <- data.frame(data[sample(nrow(data), sample_size), ], tempo, loudness, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, genre)
row.names(sampled_data) <- NULL
return(sampled_data)
}
rm(list = ls())
library(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = '4368c76bfce14f35b6ea1b3ea6b3723b')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '533222a8cd3b4d8398d83e9c87ec084f')
access_token <- get_spotify_access_token()
setwd("~/Desktop/Denison/DA/DA 401/Project")
add_artist_to_albums <- function(artist_id) {
albums <- get_artist_albums(artist_id) #getting all albums from the artist
albums$artist_name <- get_artist(artist_id)$name #adding the artist name to the albums
albums <- albums %>%
select(artist_name, name, release_date, id) %>%
dplyr::rename(album_name = name, album_id = id)
for(i in 1:nrow(albums)) { #for release dates with only the year, it sets it to be the first day of the year
if(nchar(albums$release_date[i]) == 4) {
albums$release_date[i] <- paste(albums$release_date[i], "-01-01", sep = "")
}
if(nchar(albums$release_date[i]) == 7) {
albums$release_date[i] <- paste(albums$release_date[i], "-01", sep = "")
}
}
albums$year <- as.numeric(substr(albums$release_date, 1, 4))
return(albums)
}
album_and_songs <- function(artist_id) {
album_and_song <- cbind(add_artist_to_albums(artist_id)[1,], get_album(toString(add_artist_to_albums(artist_id)$album_id[1]))[[18]][[2]][,c("id", "name")], row.names=NULL)
for(i in 2:nrow(add_artist_to_albums(artist_id))) {
album_and_song <- rbind(album_and_song, cbind(add_artist_to_albums(artist_id)[i,], get_album(toString(add_artist_to_albums(artist_id)$album_id[i]))[[18]][[2]][,c("id", "name")], row.names=NULL))
}
album_and_song <- album_and_song %>%
dplyr::rename(song_name = name, song_id = id)
return(album_and_song)
}
fully_compiled <- function(artist_id) {
albums <- album_and_songs(artist_id)
sections <- get_track_audio_analysis(albums$song_id[1])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[1])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- cbind(albums[1,], audio_analysis, row.names=NULL) #changed to albums from album_and_songs(artist_id)
for(i in 2:nrow(albums)) {
sections <- get_track_audio_analysis(albums$song_id[i])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[i])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- rbind(complete, cbind(albums[i,], audio_analysis, row.names=NULL))
}
return(complete)
}
get_genre_artists_list <- function(genre) {
artists <- spotifyr::get_genre_artists(genre = genre, limit = 50) %>%
select(name, id, genres) %>%
rename(artist_id = id)
artists$main_genre <- genre
return(artists)
}
album_and_songs_genre <- function(genre) {
artists <- get_genre_artists_list(genre)
fully_complete <- album_and_songs(artists[1,]$artist_id)
for(i in 2:nrow(artists)) {
fully_complete <- rbind(fully_complete, album_and_songs(artists[i,]$artist_id))
}
return(fully_complete)
}
data_and_audio_sample <- function(data, sample_size) {
rows <- sample(nrow(data), sample_size)
tempo <- c(); loudness <- c(); p1 <- c(); p2 <- c(); p3 <- c(); p4 <- c(); p5 <- c(); p6 <- c(); p7 <- c(); p8 <- c(); p9 <- c(); p10 <- c(); p11 <- c(); p12 <- c(); t1 <- c(); t2 <- c(); t3 <- c(); t4 <- c(); t5 <- c(); t6 <- c(); t7 <- c(); t8 <- c(); t9 <- c(); t10 <- c(); t11 <- c(); t12 <- c()
for (i in 1:sample_size) {
sections <- get_track_audio_analysis(data[rows[i],]$song_id)$sections
segments <- get_track_audio_analysis(data[rows[i],]$song_id)$segments
pitches <- segments$pitches
timbre <- segments$timbre
pitch1 <- c(); pitch2 <- c(); pitch3 <- c(); pitch4 <- c(); pitch5 <- c(); pitch6 <- c(); pitch7 <- c(); pitch8 <- c(); pitch9 <- c(); pitch10 <- c(); pitch11 <- c(); pitch12 <- c(); timbre1 <- c(); timbre2 <- c(); timbre3 <- c(); timbre4 <- c(); timbre5 <- c(); timbre6 <- c(); timbre7 <- c(); timbre8 <- c(); timbre9 <- c(); timbre10 <- c(); timbre11 <- c(); timbre12 <- c();
for(j in 1:nrow(segments)){
pitch1[j] <- pitches[[j]][1]; pitch2[j] <- pitches[[j]][2]; pitch3[j] <- pitches[[j]][3]; pitch4[j] <- pitches[[j]][4]; pitch5[j] <- pitches[[j]][5]; pitch6[j] <- pitches[[j]][6]; pitch7[j] <- pitches[[j]][7]; pitch8[j] <- pitches[[j]][8]; pitch9[j] <- pitches[[j]][9]; pitch10[j] <- pitches[[j]][10]; pitch11[j] <- pitches[[j]][11]; pitch12[j] <- pitches[[j]][12]; timbre1[j] <- timbre[[j]][1]; timbre2[j] <- timbre[[j]][2]; timbre3[j] <- timbre[[j]][3]; timbre4[j] <- timbre[[j]][4]; timbre5[j] <- timbre[[j]][5]; timbre6[j] <- timbre[[j]][6]; timbre7[j] <- timbre[[j]][7]; timbre8[j] <- timbre[[j]][8]; timbre9[j] <- timbre[[j]][9]; timbre10[j] <- timbre[[j]][10]; timbre11[j] <- timbre[[j]][11]; timbre12[j] <- timbre[[j]][12]
}
p1[i] <- weighted.mean(pitch1, segments$duration); p2[i] <- weighted.mean(pitch2, segments$duration); p3[i] <- weighted.mean(pitch3, segments$duration); p4[i] <- weighted.mean(pitch4, segments$duration); p5[i] <- weighted.mean(pitch5, segments$duration); p6[i] <- weighted.mean(pitch6, segments$duration); p7[i] <- weighted.mean(pitch7, segments$duration); p8[i] <- weighted.mean(pitch8, segments$duration); p9[i] <- weighted.mean(pitch9, segments$duration); p10[i] <- weighted.mean(pitch10, segments$duration); p11[i] <- weighted.mean(pitch11, segments$duration); p12[i] <- weighted.mean(pitch12, segments$duration); t1[i] <- weighted.mean(timbre1, segments$duration); t2[i] <- weighted.mean(timbre2, segments$duration); t3[i] <- weighted.mean(timbre3, segments$duration); t4[i] <- weighted.mean(timbre4, segments$duration); t5[i] <- weighted.mean(timbre5, segments$duration); t6[i] <- weighted.mean(timbre6, segments$duration); t7[i] <- weighted.mean(timbre7, segments$duration); t8[i] <- weighted.mean(timbre8, segments$duration); t9[i] <- weighted.mean(timbre9, segments$duration); t10[i] <- weighted.mean(timbre10, segments$duration); t11[i] <- weighted.mean(timbre11, segments$duration); t12[i] <- weighted.mean(timbre12, segments$duration)
tempo[i] <- weighted.mean(sections$tempo, sections$duration)
loudness[i] <- weighted.mean(sections$loudness, sections$duration)
}
genre <- rep(deparse(substitute(data)), sample_size)
sampled_data <- data.frame(data[sample(nrow(data), sample_size), ], tempo, loudness, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, genre)
row.names(sampled_data) <- NULL
return(sampled_data)
}
?write.csv
?do.call
sessionInfo()
rm(list = ls(all = T))
sessionInfo()
detach("package:carData", unload = TRUE)
detach("package:datasets", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:knitr", unload = TRUE)
sessionInfo()
package_version("class")
package_version(class)
package_version(ggplot2)
package_version("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
library(spotifyr)
library(dplyr)
Sys.setenv(SPOTIFY_CLIENT_ID = '4368c76bfce14f35b6ea1b3ea6b3723b')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '533222a8cd3b4d8398d83e9c87ec084f')
access_token <- get_spotify_access_token()
setwd("~/Desktop/Denison/DA/DA 401/Project")
add_artist_to_albums <- function(artist_id) {
albums <- get_artist_albums(artist_id) #getting all albums from the artist
albums$artist_name <- get_artist(artist_id)$name #adding the artist name to the albums
albums <- albums %>%
select(artist_name, name, release_date, id) %>%
dplyr::rename(album_name = name, album_id = id)
for(i in 1:nrow(albums)) { #for release dates with only the year, it sets it to be the first day of the year
if(nchar(albums$release_date[i]) == 4) {
albums$release_date[i] <- paste(albums$release_date[i], "-01-01", sep = "")
}
if(nchar(albums$release_date[i]) == 7) {
albums$release_date[i] <- paste(albums$release_date[i], "-01", sep = "")
}
}
albums$year <- as.numeric(substr(albums$release_date, 1, 4))
return(albums)
}
album_and_songs <- function(artist_id) {
album_and_song <- cbind(add_artist_to_albums(artist_id)[1,], get_album(toString(add_artist_to_albums(artist_id)$album_id[1]))[[18]][[2]][,c("id", "name")], row.names=NULL)
for(i in 2:nrow(add_artist_to_albums(artist_id))) {
album_and_song <- rbind(album_and_song, cbind(add_artist_to_albums(artist_id)[i,], get_album(toString(add_artist_to_albums(artist_id)$album_id[i]))[[18]][[2]][,c("id", "name")], row.names=NULL))
}
album_and_song <- album_and_song %>%
dplyr::rename(song_name = name, song_id = id)
return(album_and_song)
}
fully_compiled <- function(artist_id) {
albums <- album_and_songs(artist_id)
sections <- get_track_audio_analysis(albums$song_id[1])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[1])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- cbind(albums[1,], audio_analysis, row.names=NULL) #changed to albums from album_and_songs(artist_id)
for(i in 2:nrow(albums)) {
sections <- get_track_audio_analysis(albums$song_id[i])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[i])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- rbind(complete, cbind(albums[i,], audio_analysis, row.names=NULL))
}
return(complete)
}
get_genre_artists_list <- function(genre) {
artists <- spotifyr::get_genre_artists(genre = genre, limit = 50) %>%
select(name, id, genres) %>%
rename(artist_id = id)
artists$main_genre <- genre
return(artists)
}
album_and_songs_genre <- function(genre) {
artists <- get_genre_artists_list(genre)
fully_complete <- album_and_songs(artists[1,]$artist_id)
for(i in 2:nrow(artists)) {
fully_complete <- rbind(fully_complete, album_and_songs(artists[i,]$artist_id))
}
return(fully_complete)
}
data_and_audio_sample <- function(data, sample_size) {
rows <- sample(nrow(data), sample_size)
tempo <- c(); loudness <- c(); p1 <- c(); p2 <- c(); p3 <- c(); p4 <- c(); p5 <- c(); p6 <- c(); p7 <- c(); p8 <- c(); p9 <- c(); p10 <- c(); p11 <- c(); p12 <- c(); t1 <- c(); t2 <- c(); t3 <- c(); t4 <- c(); t5 <- c(); t6 <- c(); t7 <- c(); t8 <- c(); t9 <- c(); t10 <- c(); t11 <- c(); t12 <- c()
for (i in 1:sample_size) {
sections <- get_track_audio_analysis(data[rows[i],]$song_id)$sections
segments <- get_track_audio_analysis(data[rows[i],]$song_id)$segments
pitches <- segments$pitches
timbre <- segments$timbre
pitch1 <- c(); pitch2 <- c(); pitch3 <- c(); pitch4 <- c(); pitch5 <- c(); pitch6 <- c(); pitch7 <- c(); pitch8 <- c(); pitch9 <- c(); pitch10 <- c(); pitch11 <- c(); pitch12 <- c(); timbre1 <- c(); timbre2 <- c(); timbre3 <- c(); timbre4 <- c(); timbre5 <- c(); timbre6 <- c(); timbre7 <- c(); timbre8 <- c(); timbre9 <- c(); timbre10 <- c(); timbre11 <- c(); timbre12 <- c();
for(j in 1:nrow(segments)){
pitch1[j] <- pitches[[j]][1]; pitch2[j] <- pitches[[j]][2]; pitch3[j] <- pitches[[j]][3]; pitch4[j] <- pitches[[j]][4]; pitch5[j] <- pitches[[j]][5]; pitch6[j] <- pitches[[j]][6]; pitch7[j] <- pitches[[j]][7]; pitch8[j] <- pitches[[j]][8]; pitch9[j] <- pitches[[j]][9]; pitch10[j] <- pitches[[j]][10]; pitch11[j] <- pitches[[j]][11]; pitch12[j] <- pitches[[j]][12]; timbre1[j] <- timbre[[j]][1]; timbre2[j] <- timbre[[j]][2]; timbre3[j] <- timbre[[j]][3]; timbre4[j] <- timbre[[j]][4]; timbre5[j] <- timbre[[j]][5]; timbre6[j] <- timbre[[j]][6]; timbre7[j] <- timbre[[j]][7]; timbre8[j] <- timbre[[j]][8]; timbre9[j] <- timbre[[j]][9]; timbre10[j] <- timbre[[j]][10]; timbre11[j] <- timbre[[j]][11]; timbre12[j] <- timbre[[j]][12]
}
p1[i] <- weighted.mean(pitch1, segments$duration); p2[i] <- weighted.mean(pitch2, segments$duration); p3[i] <- weighted.mean(pitch3, segments$duration); p4[i] <- weighted.mean(pitch4, segments$duration); p5[i] <- weighted.mean(pitch5, segments$duration); p6[i] <- weighted.mean(pitch6, segments$duration); p7[i] <- weighted.mean(pitch7, segments$duration); p8[i] <- weighted.mean(pitch8, segments$duration); p9[i] <- weighted.mean(pitch9, segments$duration); p10[i] <- weighted.mean(pitch10, segments$duration); p11[i] <- weighted.mean(pitch11, segments$duration); p12[i] <- weighted.mean(pitch12, segments$duration); t1[i] <- weighted.mean(timbre1, segments$duration); t2[i] <- weighted.mean(timbre2, segments$duration); t3[i] <- weighted.mean(timbre3, segments$duration); t4[i] <- weighted.mean(timbre4, segments$duration); t5[i] <- weighted.mean(timbre5, segments$duration); t6[i] <- weighted.mean(timbre6, segments$duration); t7[i] <- weighted.mean(timbre7, segments$duration); t8[i] <- weighted.mean(timbre8, segments$duration); t9[i] <- weighted.mean(timbre9, segments$duration); t10[i] <- weighted.mean(timbre10, segments$duration); t11[i] <- weighted.mean(timbre11, segments$duration); t12[i] <- weighted.mean(timbre12, segments$duration)
tempo[i] <- weighted.mean(sections$tempo, sections$duration)
loudness[i] <- weighted.mean(sections$loudness, sections$duration)
}
genre <- rep(deparse(substitute(data)), sample_size)
sampled_data <- data.frame(data[sample(nrow(data), sample_size), ], tempo, loudness, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, genre)
row.names(sampled_data) <- NULL
return(sampled_data)
}
jazz <- album_and_songs_genre("jazz")
jazz <- album_and_songs_genre("jazz")
knitr::opts_chunk$set(echo = TRUE)
library(spotifyr)
library(dplyr)
Sys.setenv(SPOTIFY_CLIENT_ID = '4368c76bfce14f35b6ea1b3ea6b3723b')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '533222a8cd3b4d8398d83e9c87ec084f')
access_token <- get_spotify_access_token()
setwd("~/Desktop/Denison/DA/DA 401/Project")
add_artist_to_albums <- function(artist_id) {
albums <- get_artist_albums(artist_id) #getting all albums from the artist
albums$artist_name <- get_artist(artist_id)$name #adding the artist name to the albums
albums <- albums %>%
select(artist_name, name, release_date, id) %>%
dplyr::rename(album_name = name, album_id = id)
for(i in 1:nrow(albums)) { #for release dates with only the year, it sets it to be the first day of the year
if(nchar(albums$release_date[i]) == 4) {
albums$release_date[i] <- paste(albums$release_date[i], "-01-01", sep = "")
}
if(nchar(albums$release_date[i]) == 7) {
albums$release_date[i] <- paste(albums$release_date[i], "-01", sep = "")
}
}
albums$year <- as.numeric(substr(albums$release_date, 1, 4))
return(albums)
}
album_and_songs <- function(artist_id) {
album_and_song <- cbind(add_artist_to_albums(artist_id)[1,], get_album(toString(add_artist_to_albums(artist_id)$album_id[1]))[[18]][[2]][,c("id", "name")], row.names=NULL)
for(i in 2:nrow(add_artist_to_albums(artist_id))) {
album_and_song <- rbind(album_and_song, cbind(add_artist_to_albums(artist_id)[i,], get_album(toString(add_artist_to_albums(artist_id)$album_id[i]))[[18]][[2]][,c("id", "name")], row.names=NULL))
}
album_and_song <- album_and_song %>%
dplyr::rename(song_name = name, song_id = id)
return(album_and_song)
}
fully_compiled <- function(artist_id) {
albums <- album_and_songs(artist_id)
sections <- get_track_audio_analysis(albums$song_id[1])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[1])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- cbind(albums[1,], audio_analysis, row.names=NULL) #changed to albums from album_and_songs(artist_id)
for(i in 2:nrow(albums)) {
sections <- get_track_audio_analysis(albums$song_id[i])$sections %>%
rename(start_sections = start, duration_sections = duration)
segments <- get_track_audio_analysis(albums$song_id[i])$segments[ , c(-7:-4)] %>%
rename(start_segments = start, duration_segments = duration)
audio_analysis <- merge(data.frame(sections, row.names=NULL), data.frame(segments, row.names=NULL), by = 0, all = TRUE)[-1]
audio_analysis <- audio_analysis[order(audio_analysis$start_sections),]
complete <- rbind(complete, cbind(albums[i,], audio_analysis, row.names=NULL))
}
return(complete)
}
get_genre_artists_list <- function(genre) {
artists <- spotifyr::get_genre_artists(genre = genre, limit = 50) %>%
select(name, id, genres) %>%
rename(artist_id = id)
artists$main_genre <- genre
return(artists)
}
album_and_songs_genre <- function(genre) {
artists <- get_genre_artists_list(genre)
fully_complete <- album_and_songs(artists[1,]$artist_id)
for(i in 2:nrow(artists)) {
fully_complete <- rbind(fully_complete, album_and_songs(artists[i,]$artist_id))
}
return(fully_complete)
}
data_and_audio_sample <- function(data, sample_size) {
rows <- sample(nrow(data), sample_size)
tempo <- c(); loudness <- c(); p1 <- c(); p2 <- c(); p3 <- c(); p4 <- c(); p5 <- c(); p6 <- c(); p7 <- c(); p8 <- c(); p9 <- c(); p10 <- c(); p11 <- c(); p12 <- c(); t1 <- c(); t2 <- c(); t3 <- c(); t4 <- c(); t5 <- c(); t6 <- c(); t7 <- c(); t8 <- c(); t9 <- c(); t10 <- c(); t11 <- c(); t12 <- c()
for (i in 1:sample_size) {
sections <- get_track_audio_analysis(data[rows[i],]$song_id)$sections
segments <- get_track_audio_analysis(data[rows[i],]$song_id)$segments
pitches <- segments$pitches
timbre <- segments$timbre
pitch1 <- c(); pitch2 <- c(); pitch3 <- c(); pitch4 <- c(); pitch5 <- c(); pitch6 <- c(); pitch7 <- c(); pitch8 <- c(); pitch9 <- c(); pitch10 <- c(); pitch11 <- c(); pitch12 <- c(); timbre1 <- c(); timbre2 <- c(); timbre3 <- c(); timbre4 <- c(); timbre5 <- c(); timbre6 <- c(); timbre7 <- c(); timbre8 <- c(); timbre9 <- c(); timbre10 <- c(); timbre11 <- c(); timbre12 <- c();
for(j in 1:nrow(segments)){
pitch1[j] <- pitches[[j]][1]; pitch2[j] <- pitches[[j]][2]; pitch3[j] <- pitches[[j]][3]; pitch4[j] <- pitches[[j]][4]; pitch5[j] <- pitches[[j]][5]; pitch6[j] <- pitches[[j]][6]; pitch7[j] <- pitches[[j]][7]; pitch8[j] <- pitches[[j]][8]; pitch9[j] <- pitches[[j]][9]; pitch10[j] <- pitches[[j]][10]; pitch11[j] <- pitches[[j]][11]; pitch12[j] <- pitches[[j]][12]; timbre1[j] <- timbre[[j]][1]; timbre2[j] <- timbre[[j]][2]; timbre3[j] <- timbre[[j]][3]; timbre4[j] <- timbre[[j]][4]; timbre5[j] <- timbre[[j]][5]; timbre6[j] <- timbre[[j]][6]; timbre7[j] <- timbre[[j]][7]; timbre8[j] <- timbre[[j]][8]; timbre9[j] <- timbre[[j]][9]; timbre10[j] <- timbre[[j]][10]; timbre11[j] <- timbre[[j]][11]; timbre12[j] <- timbre[[j]][12]
}
p1[i] <- weighted.mean(pitch1, segments$duration); p2[i] <- weighted.mean(pitch2, segments$duration); p3[i] <- weighted.mean(pitch3, segments$duration); p4[i] <- weighted.mean(pitch4, segments$duration); p5[i] <- weighted.mean(pitch5, segments$duration); p6[i] <- weighted.mean(pitch6, segments$duration); p7[i] <- weighted.mean(pitch7, segments$duration); p8[i] <- weighted.mean(pitch8, segments$duration); p9[i] <- weighted.mean(pitch9, segments$duration); p10[i] <- weighted.mean(pitch10, segments$duration); p11[i] <- weighted.mean(pitch11, segments$duration); p12[i] <- weighted.mean(pitch12, segments$duration); t1[i] <- weighted.mean(timbre1, segments$duration); t2[i] <- weighted.mean(timbre2, segments$duration); t3[i] <- weighted.mean(timbre3, segments$duration); t4[i] <- weighted.mean(timbre4, segments$duration); t5[i] <- weighted.mean(timbre5, segments$duration); t6[i] <- weighted.mean(timbre6, segments$duration); t7[i] <- weighted.mean(timbre7, segments$duration); t8[i] <- weighted.mean(timbre8, segments$duration); t9[i] <- weighted.mean(timbre9, segments$duration); t10[i] <- weighted.mean(timbre10, segments$duration); t11[i] <- weighted.mean(timbre11, segments$duration); t12[i] <- weighted.mean(timbre12, segments$duration)
tempo[i] <- weighted.mean(sections$tempo, sections$duration)
loudness[i] <- weighted.mean(sections$loudness, sections$duration)
}
genre <- rep(deparse(substitute(data)), sample_size)
sampled_data <- data.frame(data[sample(nrow(data), sample_size), ], tempo, loudness, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, genre)
row.names(sampled_data) <- NULL
return(sampled_data)
}
jazz <- read.csv("jazz.csv")
setwd("~/Desktop/Denison/DA/DA 401/Project/Data")
setwd("~/Desktop/Denison/DA/DA 401/Project/Data")
jazz <- read.csv("jazz.csv")
jazz <- read.csv("jazz.csv")
library(readr)
jazz <- read_csv("jazz.csv")
View(jazz)
jazz_sam <- data_and_audio_sample(jazz, 400)
get_track_audio_analysis("0pt3Lykez1WsD7L9wVZaMd")
get_track_audio_analysis("0pt3Lykez1WsD7L9wVZaMd")
set.seed(0)
jazz_sam <- data_and_audio_sample(jazz, 400)
knitr::opts_chunk$set(echo = TRUE)
jazz_sam
jazz_sam <- jazz_sam[,-1]$jazz <- rep(1, nrow(jazz_sam))
jazz_sam <- jazz_sam[,-1]
set.seed(0)
jazz_sam <- data_and_audio_sample(jazz, 400)
jazz_sam <-
jazz_sam[,-1]
jazz_sam$jazz <- rep(1, nrow(jazz_sam))
jazz_sam
small_data <- data[-(301:700),]
small_data <- data[-301:700,]
setwd("~/Desktop/Denison/DA/DA 401/Project/Data")
data <- read.csv("sample.csv")
small_data <- data[-301:700,]
small_data <- data[-(301:700),]
colnames(small_data)[colnames(small_data)=="rock"] = "jazz"
small_data
jazz_sample <- rbind(small_data, jazz_sam)
write.csv(jazz_sample, "~/Desktop/Denison/DA/DA 401/Project/Data/jazz_sample.csv")
